* DONE Uppgift 1: Extensibilitet
Skapa en representation av en Scania-lastbil med modellnamn Scania. Ge den rimliga startvärden för relevanta fält. Lägg den i filen Scania.java i samma mapp.  Scania ska införlivas i er arvs-hierarki från tidigare, men ha ytterligare funktionalitet: den har ett flak som kan höjas (tippas) och sänkas. Införliva detta i er design så att vi kan hålla reda på vilken vinkel flaket har för närvarande, samt funktioner för att höja och sänka det.

Följande förhållanden ska gälla:

+ [X] Vinkeln på flaket kan inte vara lägre än 0 eller högre än 70.
+ [X] Det är bara om lastbilen står stilla som flaket får ha en annan vinkel än 0. Flaket ska inte kunna höjas om lastbilen är i rörelse; och lastbilen ska inte kunna köra om flaket är uppfällt.

+ [X] Lägg allt i Scania.java och skriv Javadoc för klassen och fälten. Gör minst ett JUnit-test i er testklass.

* Uppgift 2: Mer extensibilitet
Skapa en representation av en biltransport - dvs en långtradare som kan transportera bilar på flaket. Ge den ett valfritt modellnamn och filnamn.

Biltransporten ska på lämpligt sätt införlivas i er arvshierarki från tidigare. Likt Scania-lastbilen har den ett "flak" i form av en ramp som går att höja och sänka. Införliva detta i er design på lämpligt sätt.

Bilar ska kunna lastas på och av biltransporten. Biltransporten har ett maximalt antal bilar som den kan lasta. Bilar som ska lastas på biltransporten får inte vara för stora (gör ett eget antagande).

Följande förhållanden ska gälla:

+ [X] Biltransportens ramp har endast två lägen, uppe eller nere.
+ [X] Rampen kan endast vara nere om biltransporten står stilla.
+ [X] Bilar kan endast lastas om rampen är nere, och de befinner sig rimligt nära biltransporten (gör ett eget antagande, de exakta detaljerna är inte viktiga).
+ [X] Bilar kan endast lossas om rampen är nere. De bör då hamna rimligt nära biltransporten.
+ [X] Bilar kan endast lossas i omvänd ordning från hur de lastades, dvs den sista bilen som lastades måste vara först att lossas (first-in-last-out).
+ [X] Biltransporten ska inte kunna lasta på sig själv.
+ [X] Under det att en bil är lastad på biltransporten ska dess position i världen alltid vara densamma som biltransportens position.

Viktiga saker att ha i åtanke under den här uppgiften:

+ Undvik kodduplicering för funktionalitet som är gemensam för flera olika klasser, e.g. lastbil och biltransport.
+ Fundera över behovet av polymorfism för olika ändamål, och hur det påverkar framtida extensibilitet.
+ Fundera över hur ni bäst håller reda på de bilar som lastats - vilken sorts datastruktur är bäst för ändamålet?

Kom ihåg att skriva Javadoc-dokumentation, och JUnit-tester för relevanta
aspekter av er kod.

* Uppgift 3: Parametrisk polymorfism
Skapa en representation av en bilverkstad. Följande aspekter ska hanteras:

+ [X] En verkstad ska kunna ta emot ("lasta"?) ett antal bilar, upp till något max-antal som kan variera mellan olika verkstäder.
+ [X] Vissa verkstäder ska bara kunna ta emot en viss sorts bilar; andra kan ta emot vilka bilar som helst.
+ [X] Att försöka lämna in "fel" sorts bil i en verkstad ska ge ett statiskt (compile time) fel.
+ [X] Vid uthämtning av en bil från verkstaden ska vi kunna få så precis typinformation som möjligt statiskt.
  - Exempel: För en märkesverkstad som enbart hanterar Volvo 240 bör vi statiskt kunna veta att bilar som hämtas ut från verkstaden alltid är just Volvo 240.

* (VG) Uppgift 4: Ytterligare extensibilitet
+ [X] Skapa en representation av en bilfärja - dvs en färja på vilken det går att lasta bilar. Notera att bilfärjan inte är en bil (doh), men att många av de metoder vi hittills använt för olika sorters bilar bör gå att applicera även på färjan. Hur åstadkommer ni bäst detta?
+ [X] På bilfärjan gäller samma regler som för biltransporten, med undantaget att bilar lossas i samma ordning som de lastades, dvs den första bilen som lastades måste vara först att lossas (first-in-first-out).

Viktiga saker att ha i åtanke under den här uppgiften:

+ Undvik kodduplicering för funktionalitet som är gemensam för e.g. bilfärjan och biltransporten.
+ Fundera över behovet av polymorfism - nuvarande och ev. framtida.

* (VG) Uppgift 5: Abstraktion
Skapa en lösning som generaliserar bilar och bilfärjor men abstraherar bort från domänen fordon. Dvs, designa och implementera lämpliga abstraktioner för saker som är "transportörer" och "transporterbara" i allmänhet. Meningen är att dessa ska vara lika tillämpliga på bilar och bilfärjor som på t ex känguruungar och kängurumammor. Refaktorisera er bil- och bilfärjekod så att de blir specifika instanser av koden från denna uppgift.

Viktigt att tänka på:

+ En kängurumamma ska inte kunna lasta på en bil i pungen. Samtidigt vill vi inte låsa oss i förväg till att hon bara kan bära just känguruungar. Designa så att om vi i framtiden implementerar t ex wallabyungar, kan dessa lastas i en kängurumamma utan att vi behöver ändra kängurumammans implementation (OCP).
+ Ni behöver inte implementera kängurus, det var bara ett exempel.
